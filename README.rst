

.. image:: https://img.shields.io/pypi/v/fpvgcc.svg?logo=pypi
    :target: https://pypi.org/project/fpvgcc

.. image:: https://img.shields.io/pypi/pyversions/fpvgcc.svg?logo=pypi
    :target: https://pypi.org/project/fpvgcc

.. image:: https://img.shields.io/travis/ebs-universe/fpv-gcc.svg?logo=travis
    :target: https://travis-ci.org/ebs-universe/fpv-gcc

.. image:: https://img.shields.io/coveralls/github/ebs-universe/fpv-gcc.svg?logo=coveralls
    :target: https://coveralls.io/github/ebs-universe/fpv-gcc

.. image:: https://img.shields.io/requires/github/ebs-universe/fpv-gcc.svg
    :target: https://requires.io/github/ebs-universe/fpv-gcc/requirements

.. image:: https://img.shields.io/pypi/l/fpvgcc.svg
    :target: https://www.gnu.org/licenses/gpl-3.0.en.html



.. inclusion-marker-do-not-remove

.. raw:: latex

       \vspace*{\fill}

Introduction
------------
.. note::
    This (`v1.1.2``) will be the final release of the 1.x series of `fpvgcc`. 
    The tool has evolved to the extent possible within the naive framework 
    it was originally built on, and a number of open issues cannot be resolved
    without refactoring big chunks of the code. `fpvgcc v1.1.2` is essentially 
    functional and will remain available in its present form.
    
    Though I have been unable to find time to maintain and build up the tool 
    after the original releases, I hope it has been useful to the few people 
    who've used it. 

    A number of other tools are now available which do a similar job. While I 
    have minor qualms about each of those tools, such qualms are mostly 
    subjective and aesthetic objections. I am forced to admit that `fpvgcc` 
    would never have been written if some of those tools had existed at the 
    time of its writing.  

    I am considering starting work on a 2.x series of `fpvgcc`, which will 
    likely be a page one rewrite. The following are the main planned changes:
      - Reduce the number of assumptions made when parsing map files. For example, 
        allow multiple object files with the same name. 
      - Use polars or something suitably performant to store the parsed map 
        information.
      - Add a minimal fastapi interface to be able to provide a GUI using a 
        webview or similar.
      - Remove python 2 support. Minimum python version required will probably 
        be py37 or py38.
    
    I expect it will be some time before 2.x will be usable. If and when 
    development starts, it will be available in the v2 branch of this 
    repository. When v2.x reaches feature parity with v1.1.2, it will be 
    merged in to `main` and python packages for fpvgcc 2.x will be published 
    to pypi.

    Please feel free to write to me at `shashank at chintal dot in` if any 
    of the following apply to you:
      - you have been using `fpvgcc` or are maintaining a public or private 
        fork and have any concerns regarding the shift
      - you wish to take over the 1.x codebase and keep it functional and 
        available in the future  
      - you have any suggestions for features to include in 2.x 
      - you wish to contribute to the development of 2.x  


``fpvgcc`` is a python script/package to help analyse code footprint on
embedded microcontrollers using GCC generated Map files.

This module uses information contained within ``.map`` files generated by
gcc (when invoked with ``-Wl,-Map,out.map``), to provide easily
readable summaries of static memory usage at various levels of the code
hierarchy. This package generates no information that isn't already contained
within the ``.map`` file.

The provided outputs can be used to gain insight into the relative sizes of
included code, and aid in prioritizing static memory optimization for very
low memory platforms. Some provided functionality may also deliver minor
usability improvements to the workflow involved in parsing though generated
assembly listings.


.. warning::
    This package does not attempt to perform any kind of dynamic analysis.
    All memory usage reported refers only to **static** memory usage. This
    means the size of actual functions and global variables which are
    instantiated in the C code itself.

    Anything on the call stack, such as function locals, will **not** be
    accounted for. Similarly, anything in the heap which is allocated at
    runtime using ``malloc`` or similar will **not** be accounted for.

    Due to this, the utility of this module is likely limited to code
    written for highly memory constrained embedded microcontrollers, where
    dynamic memory allocation is anyway avoided when possible.

.. raw:: latex

    \clearpage
    \tableofcontents
    \clearpage

Known Issues
------------

This script was first written based on the format of mapfiles
generated by ``msp430-elf-gcc, v4.9.1``. Over time, it was modifed to
accept elements found in mapfiles generated by later versions and gcc-based
toolchains for other platforms.

Still, remember that the file parsing was implemented by observing the
content of real mapfiles, and not based on a file format specification.
Even with toolchains it was written to support, there are large sections
of the file that are not actually used. Due to this, the outputs generated
are not always accurate. Various boundary conditions result in minor errors
in size reporting.

The following more serious issues are known. They should be fixed at some
point, but for the moment I've chosen to work around them :

    - Having two C filenames with the same name (or generating the same
      obj name) in your tree will cause parsing to break on some
      platforms / toolchains.


Project Information
-------------------

The latest version of the documentation, including installation, usage, and
API/developer notes can be found at
`ReadTheDocs <https://fpv-gcc.readthedocs.io/en/latest/index.html>`_.

The latest version of the sources can be found at
`GitHub <https://github.com/ebs-universe/fpv-gcc>`_. Please use GitHub's features
to report bugs, request features, or submit pull/merge requests.

The principle author for ``fpvgcc`` is Chintalagiri Shashank. The author can
be contacted if necessary via the information on the
`author's github profile <https://github.com/chintal>`_ . See the AUTHORS file
for a full list of collaborators and/or contributing authors, if any.

``fpvgcc`` is distributed under the terms of the
`GPLv3 license <https://www.gnu.org/licenses/gpl-3.0-standalone.html>`_ .
A copy of the text of the license is included along with the sources.
